{"hash":"37440c957d803b40d35963e76c90123e2044671d","data":{"allWebPage":{"edges":[{"node":{"path":"/content/pages/queries/","content":"<h2 id=\"queries\"><a href=\"#queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queries</h2>\n<p>To run any kind of queries, you can access the exports of the resource, e.g. in JavaScript via <code>exports.ghmattimysql</code>.\nTo learn more about accessing exports please refer to your respective scripting runtime in the\n<a href=\"https://docs.fivem.net/docs/scripting-manual/runtimes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FiveM Documentation</a>. Hereafter this documentation\nwill only refer to the exported function names.</p>\n<p>The universal function is execute. It will handle almost all of your requests, apart from transactions. The <code>Sync</code>-variants are\njust sync wrappers for the normal async calls and should not impact code performance, but can only be accessed with <code>Lua</code> or\n<code>C#</code>.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">executeSync</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> result</code></pre>\n<p>Example of selecting a row with the old / C# syntax in <code>Lua</code>. Note that the <code>@</code>\nin the <code>parameters</code> argument is not needed, and you could just go with <code>id</code> as seen in the\ntransaction examples.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> playerId <span class=\"token operator\">=</span> <span class=\"token function\">getPlayerId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexports<span class=\"token punctuation\">.</span>ghmattimysql<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM users WHERE id = @id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> playerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n[{\n  \"id\": 95585726093402110,\n  \"cash\": 0,\n  \"bank\": 0,\n  \"skin\": \"{}\",\n  \"online\": true,\n  \"lastSeen\": 1590656804000\n}]\n]]</span><span class=\"token comment\">--</span></code></pre>\n<p>Example of inserting a row with the mysql.js syntax in <code>JavaScript</code>. Note that insertId is only not 0, if\nthe insert happens into a table with an autoincremented id.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPlayerCoordinates</span><span class=\"token punctuation\">(</span>playerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO users_log (x, y, z, playerId) VALUES (?, ?, ?, ?)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> playerId <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nprints:\n\n{\n  \"fieldCount\": 0,\n  \"affectedRows\": 1,\n  \"insertId\": 0,\n  \"serverStatus\": 2,\n  \"warningCount: 0,\n  \"message\": \"\",\n  \"protocol41\": true,\n  \"changedRows\": 0\n}\n*/</span></code></pre>\n<p>Example of inserting multiple rows with the mysql.js syntax in <code>JavaScript</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> players<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">player</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPlayerCoordinates</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO users_log (x, y, z, playerId) VALUES ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nprints:\n\n{\n  \"fieldCount\": 0,\n  \"affectedRows\": 1,\n  \"insertId\": 0,\n  \"serverStatus\": 2,\n  \"warningCount: 0,\n  \"message\": \"\",\n  \"protocol41\": true,\n  \"changedRows\": 0\n}\n*/</span></code></pre>\n<p>Example of updating a row with the mysql.js syntax.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"online\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPlayerId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nexports<span class=\"token punctuation\">.</span>ghmattimysql<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE ?? SET ?? = ? WHERE ?\"</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n{\n  \"fieldCount\": 0,\n  \"affectedRows\": 1,\n  \"insertId\": 0,\n  \"serverStatus\": 2,\n  \"warningCount: 0,\n  \"message\": \"(Rows matched: 1 Changed: 1 Warnings: 0)\",\n  \"protocol41\": true,\n  \"changedRows\": 1\n}\n]]</span><span class=\"token comment\">--</span></code></pre>\n"}},{"node":{"path":"/content/pages/queries-scalar/","content":"<h4 id=\"scalar\"><a href=\"#scalar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scalar</h4>\n<p>The scalar export is a cut-down execute for <code>SELECT</code> only, it only returns a singular value, e.g. it will fetch the first\ncolumn of the first row selected.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">scalarSync</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> result<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span></code></pre>\n"}},{"node":{"path":"/content/pages/queries-store/","content":"<h4 id=\"store\"><a href=\"#store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Store</h4>\n<p>The store export should be used for storing query strings, when a lot of queries are expected to be triggered at once.\nThe idea behind this feature is, that while recieving data puts stress on your server infrastructure, so does sending data.\nAnd the biggest polluter for this resource is sending overly long and complicated query strings.</p>\n<p>While the server is running you want to minimize the impact of sending a lot of queries at once puts on your architecture,\nthus you can already store these queries ahead of time, and just pass the id returned by the callback function and pass the\nparameters for these queries along.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">store</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">storeSync</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></code></pre>\n<p>As an example you can see here</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myQueryId <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">store</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT identifier, cash, online FROM users WHERE ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">storeId</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  myQueryId <span class=\"token operator\">=</span> storeId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*... this is 49 characters stored\n * if the following function gets triggered once per online player\n * and there is 60 players on the servers, that would mean we send\n * about 3000 characters in one tick through this export.\n * if you run into even worse programming and every player triggers it\n * now you are stuck with sending 176k characters.\n * \n * with store it is reduced to just one number.\n */</span>\n<span class=\"token function\">onNet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getInfoFromId'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span><span class=\"token property-access\">source</span><span class=\"token punctuation\">;</span>\n  exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">execute</span><span class=\"token punctuation\">(</span>myQueryId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token function\">emitNet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'recieveInfo'</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n"}},{"node":{"path":"/content/pages/transactions/","content":"<h2 id=\"transactions\"><a href=\"#transactions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Transactions</h2>\n<p>Transactions in <em>ghmattimysql</em> support two different syntaxes. One where the parameters are embedded in the query\n<code>object</code> and one where it is supplied as an argument to the <code>transaction</code> export itself. The query object\nfollows this structure <code>[{query: string, values: object | array}]</code>. Similar to the <code>execute</code> export,\nthe <code>values</code> field supports, like the <code>parameters</code> argument to the function, either the newer mysql.js\ntype of parameters or the old version that the C# connector uses.</p>\n<p>A transaction will only commit all queries to the database, if all queries to the database succeed. If one of them fails,\nno changes to the database will be made. This can be easily used when e.g. transfering money, making sure that the money\nfield is positive. A transaction would fail if someone would attempt to have negative cash, so that no money would be\ntransfered.</p>\n<p>Since the transaction will either fail or succeed, the callback of the function will either answer with <code>true</code>\nor <code>false</code> depending on if the transaction succeeded. If it fails an error message will be printed, but it is\nan intended one, since the commit to the database would be likely unwanted.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">transactionSync</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> array<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> result\n<span class=\"token function\">transactionSync</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> result</code></pre>\n<p>While transactions do support seperate <code>parameters</code> as an <code>array</code>, it has very limited use cases,\nas if the parameter is supplied not inside the query <code>object</code>, but as an argument to the function, it will be\napplied to every query <code>string</code>, which could lead to executing the same query accidently twice.</p>\n<p>Example of a transaction using the <code>parameters</code> field in <code>JavaScript</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash - @transfer WHERE id = @senderId'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash + @transfer WHERE id = @recipientId'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> transfer<span class=\"token operator\">:</span> amount<span class=\"token punctuation\">,</span> senderId<span class=\"token punctuation\">,</span> recipientId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>success <span class=\"token operator\">?</span> <span class=\"token string\">'Succeeded'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Failed'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in transfering $</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>amount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> cash.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Example of the same transaction not using the <code>parameters</code> field in <code>JavaScript</code>.\nThis example also supports as values the C# syntax with the <code>@</code> values.</p>\n<pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">ghmattimysql</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token string\">'UPDATE users SET cash = cash - ? WHERE id = ?'</span><span class=\"token punctuation\">,</span> values<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">,</span> senderId<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token string\">'UPDATE users SET cash = cash + ? WHERE id = ?'</span><span class=\"token punctuation\">,</span> values<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">,</span> recipientId<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>success <span class=\"token operator\">?</span> <span class=\"token string\">'Succeeded'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Failed'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in transfering $</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>amount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> cash.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This syntax is better when you have two distinct set of values, but if half or more of the values are shared,\nthe first syntax might be preferable, due to it being more concise then.</p>\n"}}]}},"context":{}}